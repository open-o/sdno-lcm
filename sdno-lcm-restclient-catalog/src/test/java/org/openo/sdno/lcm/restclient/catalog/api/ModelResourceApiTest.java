/*
 * Copyright 2017 Huawei Technologies Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Open-o Catalog Service rest API
 * 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.openo.sdno.lcm.restclient.catalog.api;

import org.openo.sdno.lcm.restclient.catalog.ApiException;
import org.openo.sdno.lcm.restclient.catalog.model.CommonErrorResponse;
import org.openo.sdno.lcm.restclient.catalog.model.ServiceTemplate;
import org.openo.sdno.lcm.restclient.catalog.model.NodeTemplate;
import org.openo.sdno.lcm.restclient.catalog.model.InputParameter;
import org.openo.sdno.lcm.restclient.catalog.model.ServiceTemplateOperation;
import org.openo.sdno.lcm.restclient.catalog.model.Parameters;
import org.openo.sdno.lcm.restclient.catalog.model.QueryRawDataCondition;
import org.openo.sdno.lcm.restclient.catalog.model.ServiceTemplateRawData;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ModelResourceApi
 */
public class ModelResourceApiTest {

    private final ModelResourceApi api = new ModelResourceApi();

    
    /**
     * Query nesting service template of a node type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNestingServiceTemplateTest() throws ApiException {
        String nodeTypeIds = null;
        // List<ServiceTemplate> response = api.getNestingServiceTemplate(nodeTypeIds);

        // TODO: test validations
    }
    
    /**
     * Query node template by node template id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeTemplateByIdTest() throws ApiException {
        String serviceTemplateId = null;
        String nodeTemplateId = null;
        // NodeTemplate response = api.getNodeTemplateById(serviceTemplateId, nodeTemplateId);

        // TODO: test validations
    }
    
    /**
     * Query node template list of a specified service template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeTemplatesByTypeTest() throws ApiException {
        String serviceTemplateId = null;
        String types = null;
        // List<NodeTemplate> response = api.getNodeTemplatesByType(serviceTemplateId, types);

        // TODO: test validations
    }
    
    /**
     * Query input parameters of a specified operation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParametersByOperationNameTest() throws ApiException {
        String serviceTemplateId = null;
        String operationName = null;
        // List<InputParameter> response = api.getParametersByOperationName(serviceTemplateId, operationName);

        // TODO: test validations
    }
    
    /**
     * Query service template by service template id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceTemplateByIdTest() throws ApiException {
        String servicetemplateid = null;
        // ServiceTemplate response = api.getServiceTemplateById(servicetemplateid);

        // TODO: test validations
    }
    
    /**
     * Query operation list of service template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceTemplateOperationsTest() throws ApiException {
        String serviceTemplateId = null;
        // List<ServiceTemplateOperation> response = api.getServiceTemplateOperations(serviceTemplateId);

        // TODO: test validations
    }
    
    /**
     * Query input parameters of service template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceTemplateParametersTest() throws ApiException {
        String servicetemplateid = null;
        // Parameters response = api.getServiceTemplateParameters(servicetemplateid);

        // TODO: test validations
    }
    
    /**
     * Query raw data of a service template by csar id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceTemplateRawDataTest() throws ApiException {
        QueryRawDataCondition body = null;
        // ServiceTemplateRawData response = api.getServiceTemplateRawData(body);

        // TODO: test validations
    }
    
    /**
     * Query service template by filter conditions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceTemplatesTest() throws ApiException {
        String status = null;
        Boolean deletionPending = null;
        // List<ServiceTemplate> response = api.getServiceTemplates(status, deletionPending);

        // TODO: test validations
    }
    
    /**
     * test
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testTest() throws ApiException {
        // List<String> response = api.test();

        // TODO: test validations
    }
    
}
