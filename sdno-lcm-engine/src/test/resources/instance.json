{
  "instance": {
    "description": "sdno basic types",
    "inputs": {
      "dcFwIp": {
        "description": "mgrIp of dc Firewall",
        "type_name": "string",
        "value": "none"
      },
      "dcGwIp": {
        "description": "mgrIp of dcGW",
        "type_name": "string",
        "value": "none"
      },
      "dcLbIp": {
        "description": "mgrIp of dc Load Balancer",
        "type_name": "string",
        "value": "none"
      },
      "siteCidr": {
        "description": "enterprise site cidr",
        "type_name": "string",
        "value": "none"
      },
      "siteName": {
        "description": "Name of Site",
        "type_name": "string",
        "value": "none"
      },
      "siteVni": {
        "description": "VxLAN ID connect site to vCPE",
        "type_name": "integer",
        "value": 0
      },
      "subnetVlan": {
        "description": "Vlan value of Subnet",
        "type_name": "integer",
        "value": 0
      },
      "vpcName": {
        "description": "in format of domain/project, should keep consistent with NFVO",
        "type_name": "string",
        "value": "none"
      },
      "vpcSubnetCidr": {
        "description": "vpc cidr",
        "type_name": "string",
        "value": "none"
      },
      "vpcSubnetName": {
        "description": "name of subnet in VPC, should keep consistent with NFVO",
        "type_name": "string",
        "value": "none"
      },
      "vpcVni": {
        "description": "vpc subnet vxlanID, should keep consistent with NFVO",
        "type_name": "integer",
        "value": 0
      },
      "vpnDescription": {
        "description": "description of Overlayvpn",
        "type_name": "string",
        "value": "none"
      },
      "vpnName": {
        "description": "Name of Overlayvpn",
        "type_name": "string",
        "value": "none"
      },
      "vpnType": {
        "description": "vpn connection type between vCPE and vpc.",
        "type_name": "string",
        "value": "IpSec"
      }
    },
    "metadata": {
      "id": "enterprise2Dc",
      "template_author": "Huawei",
      "template_name": "enterprise2DC",
      "vendor": "sdno",
      "version": 0.1
    },
    "nodes": [
      {
        "artifacts": [
          {
            "name": "mapper",
            "source_path": "mapper/site.tsmap",
            "type_name": "sdno.artifacts.Implementation.ToscaSwaggerMapper"
          },
          {
            "name": "swagger",
            "source_path": "swagger/site.jaml",
            "type_name": "sdno.artifacts.Implementation.Swagger"
          }
        ],
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "realizes",
            "type_name": "sdno.capability.Realizes"
          }
        ],
        "id": "site_o5rq6bisxutafrxsbse6c8n5e",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          },
          {
            "name": "standard",
            "operations": [
              {
                "description": "Standard lifecycle undeploy operation.",
                "implementation": "DELETE /openoapi/sdnolocalsite/v1/sites/{uuid}",
                "name": "undeploy"
              },
              {
                "description": "Standard lifecycle get operation.",
                "implementation": "GET /openoapi/sdnolocalsite/v1/sites",
                "name": "get"
              },
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "dependencies": [
                  "sdno.node.Connection.Site/deploy",
                  "sdno.node.ConnectionEndPoint.ThinCpe/deploy",
                  "sdno.node.ConnectionEndPoint.VCpe/deploy"
                ],
                "description": "Standard lifecycle deploy operation.",
                "implementation": "POST /openoapi/sdnolocalsite/v1/sites",
                "name": "deploy"
              },
              {
                "description": "Standard lifecycle configure and update operation.",
                "implementation": "PUT /openoapi/sdnolocalsite/v1/sites/{uuid}",
                "name": "update"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              }
            ],
            "type_name": "sdno.interfaces.lifecycle.Standard"
          }
        ],
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "deployCloudCpeByDeafult": {
            "description": null,
            "type_name": "string",
            "value": "true"
          },
          "description": {
            "type_name": "string",
            "value": "Site Service"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "siteDescriptor": {
            "description": "site Descriptor",
            "type_name": "string",
            "value": "IpSec"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "relationships": [
          {
            "name": "endPoint",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 0,
            "target_node_id": "vCpeConnectionEndPoint_zsq2cby1eof28tf5alz9huc4b"
          },
          {
            "name": "endPoint",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 1,
            "target_node_id": "thinCpeConnectionEndPoint_2935zu4vefj85kg6nxcpzthn3"
          }
        ],
        "template_name": "site",
        "type_name": "sdno.node.Connection.Site"
      },
      {
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "host",
            "type_name": "sdno.capability.Host"
          },
          {
            "name": "binding",
            "type_name": "sdno.capability.Bindable"
          }
        ],
        "id": "thinCpe_w79nbcl3nvmka5dzc40qvwbe8",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          }
        ],
        "properties": {
          "controllerID": {
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "none"
          },
          "id": {
            "type_name": "string",
            "value": "0"
          },
          "ipAddress": {
            "type_name": "string",
            "value": "0.0.0.0"
          },
          "logicID": {
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "nativeID": {
            "type_name": "string",
            "value": "none"
          },
          "phyNeID": {
            "type_name": "string",
            "value": "none"
          },
          "siteID": {
            "type_name": "string",
            "value": "none"
          },
          "siteName": {
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "template_name": "thinCpe",
        "type_name": "sdno.node.Node"
      },
      {
        "artifacts": [
          {
            "name": "mapper",
            "source_path": "mapper/site.tsmap",
            "type_name": "sdno.artifacts.Implementation.ToscaSwaggerMapper"
          },
          {
            "name": "swagger",
            "source_path": "swagger/site.jaml",
            "type_name": "sdno.artifacts.Implementation.Swagger"
          }
        ],
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "realizes",
            "type_name": "sdno.capability.Realizes"
          }
        ],
        "id": "vlan_uyvmzbs7d0c1no7kaw3iytmoc",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          },
          {
            "name": "standard",
            "operations": [
              {
                "description": "Standard lifecycle undeploy operation.",
                "implementation": "DELETE /openoapi/sdnolocalsite/v1/vlans/{uuid}",
                "name": "undeploy"
              },
              {
                "description": "Standard lifecycle get operation.",
                "implementation": "GET /openoapi/sdnolocalsite/v1/vlans",
                "name": "get"
              },
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "dependencies": [
                  "sdno.node.Connection.Site/deploy",
                  "sdno.node.Connection.Vlan/deploy"
                ],
                "description": "Standard lifecycle deploy operation.",
                "implementation": "POST /openoapi/sdnolocalsite/v1/vlans",
                "name": "deploy"
              },
              {
                "description": "Standard lifecycle configure and update operation.",
                "implementation": "PUT /openoapi/sdnolocalsite/v1/vlans/{uuid}",
                "name": "update"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              }
            ],
            "type_name": "sdno.interfaces.lifecycle.Standard"
          }
        ],
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "Vlan Service"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "vlan_none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          },
          "vlanId": {
            "description": "vlan id",
            "type_name": "integer",
            "value": 0
          }
        },
        "relationships": [
          {
            "name": "realizes",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 0,
            "target_node_id": "site_o5rq6bisxutafrxsbse6c8n5e"
          }
        ],
        "template_name": "vlan",
        "type_name": "sdno.node.Connection.Vlan"
      },
      {
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "host",
            "type_name": "sdno.capability.Host"
          },
          {
            "name": "binding",
            "type_name": "sdno.capability.Bindable"
          }
        ],
        "id": "dcLb_zyuqg6rh3wmvr58x31h7q06t4",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          }
        ],
        "properties": {
          "controllerID": {
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "none"
          },
          "id": {
            "type_name": "string",
            "value": "0"
          },
          "ipAddress": {
            "type_name": "string",
            "value": "none"
          },
          "logicID": {
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "nativeID": {
            "type_name": "string",
            "value": "none"
          },
          "phyNeID": {
            "type_name": "string",
            "value": "none"
          },
          "siteID": {
            "type_name": "string",
            "value": "none"
          },
          "siteName": {
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "template_name": "dcLb",
        "type_name": "sdno.node.Node"
      },
      {
        "artifacts": [
          {
            "name": "mapper",
            "source_path": "mapper/overlay.tsmap",
            "type_name": "sdno.artifacts.Implementation.ToscaSwaggerMapper"
          },
          {
            "name": "swagger",
            "source_path": "swagger/overlay.jaml",
            "type_name": "sdno.artifacts.Implementation.Swagger"
          }
        ],
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "endPoint",
            "type_name": "sdno.capability.ConnectionEndPoint"
          }
        ],
        "id": "siteGateway_b6g5qq5lfzpqazim0ex9y3ypa",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          },
          {
            "name": "standard",
            "operations": [
              {
                "description": "Standard lifecycle undeploy operation.",
                "implementation": "DELETE /openoapi/sdnooverlay/v1/vpn-gateways/{uuid}",
                "name": "undeploy"
              },
              {
                "description": "Standard lifecycle get operation.",
                "implementation": "GET /openoapi/sdnooverlay/v1/vpn-gateways",
                "name": "get"
              },
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle deploy operation.",
                "implementation": "POST /openoapi/sdnooverlay/v1/vpn-gateways",
                "name": "deploy"
              },
              {
                "description": "Standard lifecycle configure and update operation.",
                "implementation": "PUT /openoapi/sdnooverlay/v1/vpn-gateways/{uuid}",
                "name": "update"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              }
            ],
            "type_name": "sdno.interfaces.lifecycle.Standard"
          }
        ],
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "Vpn Gateway"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "siteGateway_none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "template_name": "siteGateway",
        "type_name": "sdno.node.ConnectionEndPoint.SiteGateway"
      },
      {
        "artifacts": [
          {
            "name": "mapper",
            "source_path": "mapper/overlay.tsmap",
            "type_name": "sdno.artifacts.Implementation.ToscaSwaggerMapper"
          },
          {
            "name": "swagger",
            "source_path": "swagger/overlay.jaml",
            "type_name": "sdno.artifacts.Implementation.Swagger"
          }
        ],
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "endPoint",
            "type_name": "sdno.capability.ConnectionEndPoint"
          }
        ],
        "id": "vpcGateway_qyrwpfff0cjuott9ak30vv7bb",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          },
          {
            "name": "standard",
            "operations": [
              {
                "description": "Standard lifecycle undeploy operation.",
                "implementation": "DELETE /openoapi/sdnooverlay/v1/vpn-gateways/{uuid}",
                "name": "undeploy"
              },
              {
                "description": "Standard lifecycle get operation.",
                "implementation": "GET /openoapi/sdnooverlay/v1/vpn-gateways",
                "name": "get"
              },
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle deploy operation.",
                "implementation": "POST /openoapi/sdnooverlay/v1/vpn-gateways",
                "name": "deploy"
              },
              {
                "description": "Standard lifecycle configure and update operation.",
                "implementation": "PUT /openoapi/sdnooverlay/v1/vpn-gateways/{uuid}",
                "name": "update"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              }
            ],
            "type_name": "sdno.interfaces.lifecycle.Standard"
          }
        ],
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "Vpn Gateway"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "vpcGateway_none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "template_name": "vpcGateway",
        "type_name": "sdno.node.ConnectionEndPoint.VpcGateway"
      },
      {
        "artifacts": [
          {
            "name": "mapper",
            "source_path": "mapper/sfc.tsmap",
            "type_name": "sdno.artifacts.Implementation.ToscaSwaggerMapper"
          },
          {
            "name": "swagger",
            "source_path": "swagger/sfc.jaml",
            "type_name": "sdno.artifacts.Implementation.Swagger"
          }
        ],
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "realizes",
            "type_name": "sdno.capability.Realizes"
          }
        ],
        "id": "sfc_l1v28rc2313i47p6nusmzz11c",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          },
          {
            "name": "standard",
            "operations": [
              {
                "description": "Standard lifecycle undeploy operation.",
                "implementation": "DELETE /openoapi/sdnoservicechain/v1/paths/{uuid}",
                "name": "undeploy"
              },
              {
                "description": "Standard lifecycle get operation.",
                "name": "get"
              },
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle deploy operation.",
                "implementation": "POST /openoapi/sdnoservicechain/v1/paths",
                "name": "deploy"
              },
              {
                "description": "Standard lifecycle configure and update operation.",
                "name": "update"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              }
            ],
            "type_name": "sdno.interfaces.lifecycle.Standard"
          }
        ],
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "Service Function Chain Service"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "sfc_none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "scfNeId": {
            "description": "The id of scf NE",
            "type_name": "string",
            "value": {
              "get_attribute": [
                "dcGw",
                "id"
              ]
            }
          },
          "servicePathHops": {
            "description": "Hop Number of the SFC",
            "type_name": "list",
            "value": [
              {
                "hopNumber": 1,
                "name": "dcFw",
                "sfgId": "",
                "sfiId": {
                  "get_attribute": [
                    "dcFw",
                    "id"
                  ]
                }
              },
              {
                "hopNumber": 2,
                "name": "dcLb",
                "sfgId": "",
                "sfiId": {
                  "get_attribute": [
                    "dcLb",
                    "id"
                  ]
                }
              }
            ]
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "template_name": "sfc",
        "type_name": "sdno.node.Connection.Sfc"
      },
      {
        "artifacts": [
          {
            "name": "mapper",
            "source_path": "mapper/vpc.tsmap",
            "type_name": "sdno.artifacts.Implementation.ToscaSwaggerMapper"
          },
          {
            "name": "swagger",
            "source_path": "swagger/vpc.jaml",
            "type_name": "sdno.artifacts.Implementation.Swagger"
          }
        ],
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "realizes",
            "type_name": "sdno.capability.Realizes"
          }
        ],
        "id": "vpcSubnet_wjhomht30lq07juvvomdf8dw4",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          },
          {
            "name": "standard",
            "operations": [
              {
                "description": "Standard lifecycle undeploy operation.",
                "implementation": "DELETE /openoapi/sdnovpc/v1/subnets/{subnetId}",
                "name": "undeploy"
              },
              {
                "description": "Standard lifecycle get operation.",
                "implementation": "GET /openoapi/sdnovpc/v1/subnets/{subnetId}",
                "name": "get"
              },
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "dependencies": [
                  "sdno.node.Connection.Vpc/deploy",
                  "sdno.node.Connection.VpcSubnet/deploy"
                ],
                "description": "Standard lifecycle deploy operation.",
                "implementation": "POST /openoapi/sdnovpc/v1/subnets",
                "name": "deploy"
              },
              {
                "description": "Standard lifecycle configure and update operation.",
                "name": "update"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              }
            ],
            "type_name": "sdno.interfaces.lifecycle.Standard"
          }
        ],
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "cidr": {
            "description": "VPC subnet IP network, should be in format CIDR format.",
            "type_name": "string",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "VpcSubnet Service"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          },
          "vni": {
            "description": "The Vxlan id",
            "type_name": "integer",
            "value": 0
          }
        },
        "relationships": [
          {
            "name": "realizes",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 0,
            "target_node_id": "vpc_bubtiwpniztsrbrvs82jn5ax4"
          }
        ],
        "template_name": "vpcSubnet",
        "type_name": "sdno.node.Connection.VpcSubnet"
      },
      {
        "artifacts": [
          {
            "name": "mapper",
            "source_path": "mapper/site.tsmap",
            "type_name": "sdno.artifacts.Implementation.ToscaSwaggerMapper"
          },
          {
            "name": "swagger",
            "source_path": "swagger/site.jaml",
            "type_name": "sdno.artifacts.Implementation.Swagger"
          }
        ],
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "realizes",
            "type_name": "sdno.capability.Realizes"
          }
        ],
        "id": "siteSubnet_o8akm81j7x2nqr649b4w35374",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          },
          {
            "name": "standard",
            "operations": [
              {
                "description": "Standard lifecycle undeploy operation.",
                "implementation": "DELETE /openoapi/sdnolocalsite/v1/subnets/{uuid}",
                "name": "undeploy"
              },
              {
                "description": "Standard lifecycle get operation.",
                "implementation": "GET /openoapi/sdnolocalsite/v1/subnets",
                "name": "get"
              },
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "dependencies": [
                  "sdno.node.Connection.Vlan/deploy",
                  "sdno.node.Connection.SiteSubnet/deploy"
                ],
                "description": "Standard lifecycle deploy operation.",
                "implementation": "POST /openoapi/sdnolocalsite/v1/subnets",
                "name": "deploy"
              },
              {
                "description": "Standard lifecycle configure and update operation.",
                "implementation": "PUT /openoapi/sdnolocalsite/v1/subnets/{uuid}",
                "name": "update"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              }
            ],
            "type_name": "sdno.interfaces.lifecycle.Standard"
          }
        ],
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "cidrBlock": {
            "description": "cidr block",
            "type_name": "string",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "SiteSubnet Service"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "siteSubnet_none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          },
          "vni": {
            "description": "vni",
            "type_name": "string",
            "value": 0
          }
        },
        "relationships": [
          {
            "name": "realizes",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 0,
            "target_node_id": "vlan_uyvmzbs7d0c1no7kaw3iytmoc"
          }
        ],
        "template_name": "siteSubnet",
        "type_name": "sdno.node.Connection.SiteSubnet"
      },
      {
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "host",
            "type_name": "sdno.capability.Host"
          },
          {
            "name": "binding",
            "type_name": "sdno.capability.Bindable"
          }
        ],
        "id": "dcGw_k49yv35nrkp9ql251ph6cqqc2",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          }
        ],
        "properties": {
          "controllerID": {
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "none"
          },
          "id": {
            "type_name": "string",
            "value": "0"
          },
          "ipAddress": {
            "type_name": "string",
            "value": "none"
          },
          "logicID": {
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "nativeID": {
            "type_name": "string",
            "value": "none"
          },
          "phyNeID": {
            "type_name": "string",
            "value": "none"
          },
          "siteID": {
            "type_name": "string",
            "value": "none"
          },
          "siteName": {
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "template_name": "dcGw",
        "type_name": "sdno.node.Node"
      },
      {
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          }
        ],
        "id": "enterprise2Dc_9ga8fikmb238xxpq10w7jb5b1",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          },
          {
            "name": "standard",
            "operations": [
              {
                "description": "Standard lifecycle undeploy operation.",
                "implementation": "POST /openoapi/sdnonslcm/v1/ns/{instanceid}/terminate",
                "name": "undeploy"
              },
              {
                "description": "Standard lifecycle get operation.",
                "implementation": "GET /openoapi/sdnonslcm/v1/ns/{instanceid}",
                "name": "get"
              },
              {
                "description": "Standard lifecycle create operation.",
                "implementation": "POST /openoapi/sdnonslcm/v1/ns",
                "name": "create"
              },
              {
                "dependencies": [
                  "sdno.node.Connection.VpcSubnet/deploy",
                  "sdno.node.Connection.SiteSubnet/deploy",
                  "sdno.node.Connection.Vpn/deploy",
                  "sdno.node.Connection.Sfc/deploy"
                ],
                "description": "Deploy Enterprise2Dc",
                "implementation": "POST /openoapi/sdnonslcm/v1/ns/{instanceid}/instantiate",
                "name": "deploy"
              },
              {
                "description": "Standard lifecycle configure and update operation.",
                "implementation": "PUT /openoapi/sdnonslcm/v1/ns/{instanceid}",
                "name": "update"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "implementation": "DELETE /openoapi/sdnonslcm/v1/ns/{instanceid}",
                "name": "delete"
              }
            ],
            "type_name": "sdno.interfaces.lifecycle.Standard"
          }
        ],
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "none"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "lifecycleState": {
            "type_name": "LifecycleStateType",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "state_machine": {
            "type_name": "StateMachineType",
            "value": {
              "rows": [
                {
                  "apiOperation": "create",
                  "currentState": "none",
                  "newState": "created",
                  "transitionWorkflow": "create"
                },
                {
                  "apiOperation": "create",
                  "currentState": "created",
                  "newState": "created",
                  "transitionWorkflow": "error"
                },
                {
                  "apiOperation": "create",
                  "currentState": "deployed",
                  "newState": "deployed",
                  "transitionWorkflow": "error"
                },
                {
                  "apiOperation": "deploy",
                  "currentState": "none",
                  "newState": "deployed",
                  "transitionWorkflow": "deploy"
                },
                {
                  "apiOperation": "deploy",
                  "currentState": "created",
                  "newState": "deployed",
                  "transitionWorkflow": "deployCreated"
                },
                {
                  "apiOperation": "deploy",
                  "currentState": "deployed",
                  "newState": "deployed",
                  "transitionWorkflow": "ERR"
                },
                {
                  "apiOperation": "get",
                  "currentState": "none",
                  "newState": "none",
                  "transitionWorkflow": "ERR"
                },
                {
                  "apiOperation": "get",
                  "currentState": "created",
                  "newState": "created",
                  "transitionWorkflow": "get"
                },
                {
                  "apiOperation": "get",
                  "currentState": "deployed",
                  "newState": "deployed",
                  "transitionWorkflow": "get"
                },
                {
                  "apiOperation": "update",
                  "currentState": "none",
                  "newState": "none",
                  "transitionWorkflow": "ERR"
                },
                {
                  "apiOperation": "update",
                  "currentState": "created",
                  "newState": "created",
                  "transitionWorkflow": "updatecreated"
                },
                {
                  "apiOperation": "update",
                  "currentState": "deployed",
                  "newState": "deployed",
                  "transitionWorkflow": "updateDeployed"
                },
                {
                  "apiOperation": "undeploy",
                  "currentState": "none",
                  "newState": "none",
                  "transitionWorkflow": "ERR"
                },
                {
                  "apiOperation": "undeploy",
                  "currentState": "created",
                  "newState": "created",
                  "transitionWorkflow": "ERR"
                },
                {
                  "apiOperation": "undeploy",
                  "currentState": "deployed",
                  "newState": "created",
                  "transitionWorkflow": "undeploy"
                },
                {
                  "apiOperation": "delete",
                  "currentState": "none",
                  "newState": "none",
                  "transitionWorkflow": "ERR"
                },
                {
                  "apiOperation": "delete",
                  "currentState": "created",
                  "newState": "none",
                  "transitionWorkflow": "deleteCreated"
                },
                {
                  "apiOperation": "delete",
                  "currentState": "deployed",
                  "newState": "none",
                  "transitionWorkflow": "deleteDeployed"
                }
              ]
            }
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "templateId": {
            "type_name": "string",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "relationships": [
          {
            "name": "endPoint",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 0,
            "target_node_id": "thinCpeServiceEndpoint_g7ql71xjls99lw6b33wy4st06"
          },
          {
            "name": "endPoint",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 1,
            "target_node_id": "dcServiceEndpoint_qm7md5szwv8gg1uzy1e26elw4"
          },
          {
            "name": "realizes",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 2,
            "target_node_id": "siteSubnet_o8akm81j7x2nqr649b4w35374"
          },
          {
            "name": "realizes",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 3,
            "target_node_id": "vpn_4nfugmvvt9fisyr1xc69m5a41"
          },
          {
            "name": "realizes",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 4,
            "target_node_id": "vpcSubnet_wjhomht30lq07juvvomdf8dw4"
          },
          {
            "name": "realizes",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 5,
            "target_node_id": "sfc_l1v28rc2313i47p6nusmzz11c"
          }
        ],
        "template_name": "enterprise2Dc",
        "type_name": "sdno.node.ConnectivityService.Enterprise2Dc"
      },
      {
        "artifacts": [
          {
            "name": "mapper",
            "source_path": "mapper/site.tsmap",
            "type_name": "sdno.artifacts.Implementation.ToscaSwaggerMapper"
          },
          {
            "name": "swagger",
            "source_path": "swagger/site.jaml",
            "type_name": "sdno.artifacts.Implementation.Swagger"
          }
        ],
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "endPoint",
            "type_name": "sdno.capability.ConnectionEndPoint"
          }
        ],
        "id": "vCpeConnectionEndPoint_zsq2cby1eof28tf5alz9huc4b",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          },
          {
            "name": "standard",
            "operations": [
              {
                "description": "Standard lifecycle undeploy operation.",
                "implementation": "DELETE /openoapi/sdnolocalsite/v1/cloud-cpes/{uuid}",
                "name": "undeploy"
              },
              {
                "description": "Standard lifecycle get operation.",
                "implementation": "GET /openoapi/sdnolocalsite/v1/cloud-cpes",
                "name": "get"
              },
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle deploy operation.",
                "implementation": "POST /openoapi/sdnolocalsite/v1/cloud-cpes",
                "name": "deploy"
              },
              {
                "description": "Standard lifecycle configure and update operation.",
                "implementation": "PUT /openoapi/sdnolocalsite/v1/cloud-cpes/{uuid}",
                "name": "update"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              }
            ],
            "type_name": "sdno.interfaces.lifecycle.Standard"
          }
        ],
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "vCpe"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "relationships": [
          {
            "name": "realizes",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 0,
            "target_node_id": "site_o5rq6bisxutafrxsbse6c8n5e"
          },
          {
            "name": "node",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 1,
            "target_node_id": "vCpe_d02nshzvkajhr8ug5hkq5y18c"
          }
        ],
        "template_name": "vCpeConnectionEndPoint",
        "type_name": "sdno.node.ConnectionEndPoint.VCpe"
      },
      {
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "host",
            "type_name": "sdno.capability.Host"
          },
          {
            "name": "binding",
            "type_name": "sdno.capability.Bindable"
          }
        ],
        "id": "dcFw_jyiep6eb3922msgl4k8zxoc5e",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          }
        ],
        "properties": {
          "controllerID": {
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "none"
          },
          "id": {
            "type_name": "string",
            "value": "0"
          },
          "ipAddress": {
            "type_name": "string",
            "value": "none"
          },
          "logicID": {
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "nativeID": {
            "type_name": "string",
            "value": "none"
          },
          "phyNeID": {
            "type_name": "string",
            "value": "none"
          },
          "siteID": {
            "type_name": "string",
            "value": "none"
          },
          "siteName": {
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "template_name": "dcFw",
        "type_name": "sdno.node.Node"
      },
      {
        "artifacts": [
          {
            "name": "mapper",
            "source_path": "mapper/vpc.tsmap",
            "type_name": "sdno.artifacts.Implementation.ToscaSwaggerMapper"
          },
          {
            "name": "swagger",
            "source_path": "swagger/vpc.jaml",
            "type_name": "sdno.artifacts.Implementation.Swagger"
          }
        ],
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "realizes",
            "type_name": "sdno.capability.Realizes"
          }
        ],
        "id": "vpc_bubtiwpniztsrbrvs82jn5ax4",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          },
          {
            "name": "standard",
            "operations": [
              {
                "description": "Standard lifecycle undeploy operation.",
                "implementation": "DELETE /openoapi/sdnovpc/v1/vpcs/{vpcId}",
                "name": "undeploy"
              },
              {
                "description": "Standard lifecycle get operation.",
                "implementation": "GET /openoapi/sdnovpc/v1/vpcs/{vpcId}",
                "name": "get"
              },
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle deploy operation.",
                "implementation": "POST /openoapi/sdnovpc/v1/vpcs",
                "name": "deploy"
              },
              {
                "description": "Standard lifecycle configure and update operation.",
                "name": "update"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              }
            ],
            "type_name": "sdno.interfaces.lifecycle.Standard"
          }
        ],
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "Vpc Service"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "template_name": "vpc",
        "type_name": "sdno.node.Connection.Vpc"
      },
      {
        "artifacts": [
          {
            "name": "mapper",
            "source_path": "mapper/site.tsmap",
            "type_name": "sdno.artifacts.Implementation.ToscaSwaggerMapper"
          },
          {
            "name": "swagger",
            "source_path": "swagger/site.jaml",
            "type_name": "sdno.artifacts.Implementation.Swagger"
          }
        ],
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "endPoint",
            "type_name": "sdno.capability.ConnectionEndPoint"
          }
        ],
        "id": "thinCpeConnectionEndPoint_2935zu4vefj85kg6nxcpzthn3",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          },
          {
            "name": "standard",
            "operations": [
              {
                "description": "Standard lifecycle undeploy operation.",
                "implementation": "DELETE /openoapi/sdnolocalsite/v1/local-cpes/{uuid}",
                "name": "undeploy"
              },
              {
                "description": "Standard lifecycle get operation.",
                "implementation": "GET /openoapi/sdnolocalsite/v1/local-cpes",
                "name": "get"
              },
              {
                "description": "Standard lifecycle create operation.",
                "implementation": "POST /openoapi/sdnolocalsite/v1/local-cpes",
                "name": "create"
              },
              {
                "description": "Standard lifecycle deploy operation.",
                "implementation": "POST /openoapi/sdnolocalsite/v1/local-cpes",
                "name": "deploy"
              },
              {
                "description": "Standard lifecycle configure and update operation.",
                "name": "update"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              }
            ],
            "type_name": "sdno.interfaces.lifecycle.Standard"
          }
        ],
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "ThinCpe"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "relationships": [
          {
            "name": "realizes",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 0,
            "target_node_id": "site_o5rq6bisxutafrxsbse6c8n5e"
          },
          {
            "name": "node",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 1,
            "target_node_id": "thinCpe_w79nbcl3nvmka5dzc40qvwbe8"
          }
        ],
        "template_name": "thinCpeConnectionEndPoint",
        "type_name": "sdno.node.ConnectionEndPoint.ThinCpe"
      },
      {
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "host",
            "type_name": "sdno.capability.Host"
          },
          {
            "name": "binding",
            "type_name": "sdno.capability.Bindable"
          }
        ],
        "id": "vCpe_d02nshzvkajhr8ug5hkq5y18c",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          }
        ],
        "properties": {
          "controllerID": {
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "none"
          },
          "id": {
            "type_name": "string",
            "value": "0"
          },
          "ipAddress": {
            "type_name": "string",
            "value": "0.0.0.0"
          },
          "logicID": {
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "nativeID": {
            "type_name": "string",
            "value": "none"
          },
          "phyNeID": {
            "type_name": "string",
            "value": "none"
          },
          "siteID": {
            "type_name": "string",
            "value": "none"
          },
          "siteName": {
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "template_name": "vCpe",
        "type_name": "sdno.node.Node"
      },
      {
        "artifacts": [
          {
            "name": "mapper",
            "source_path": "mapper/overlay.tsmap",
            "type_name": "sdno.artifacts.Implementation.ToscaSwaggerMapper"
          },
          {
            "name": "swagger",
            "source_path": "swagger/overlay.jaml",
            "type_name": "sdno.artifacts.Implementation.Swagger"
          }
        ],
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "realizes",
            "type_name": "sdno.capability.Realizes"
          }
        ],
        "id": "vpn_4nfugmvvt9fisyr1xc69m5a41",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          },
          {
            "name": "standard",
            "operations": [
              {
                "description": "Standard lifecycle undeploy operation.",
                "implementation": "DELETE /openoapi/sdnooverlay/v1/vpns/action/undeploy",
                "name": "undeploy"
              },
              {
                "description": "Standard lifecycle get operation.",
                "implementation": "GET /openoapi/sdnooverlay/v1/vpns",
                "name": "get"
              },
              {
                "description": "Standard lifecycle create operation.",
                "implementation": "POST /openoapi/sdnooverlay/v1/vpns",
                "name": "create"
              },
              {
                "dependencies": [
                  "sdno.node.Connection.Vpn/deploy",
                  "sdno.node.Connection.VpnConnection/deploy"
                ],
                "description": "Standard lifecycle deploy operation.",
                "implementation": "POST /openoapi/sdnooverlay/v1/vpns/action/deploy",
                "name": "deploy"
              },
              {
                "description": "Standard lifecycle configure and update operation.",
                "implementation": "PUT /openoapi/sdnooverlay/v1/vpns/{uuid}",
                "name": "update"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "implementation": "DELETE /openoapi/sdnooverlay/v1/vpns/{uuid}",
                "name": "delete"
              }
            ],
            "type_name": "sdno.interfaces.lifecycle.Standard"
          }
        ],
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "none"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          },
          "vpnDescriptor": {
            "description": "vpn template name",
            "type_name": "string",
            "value": "IpSec"
          }
        },
        "relationships": [
          {
            "name": "realizes",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 0,
            "target_node_id": "vpnConnection_y1swap0nuecyif8nwristmwk3"
          }
        ],
        "template_name": "vpn",
        "type_name": "sdno.node.Connection.Vpn"
      },
      {
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "endPoint",
            "type_name": "sdno.capability.ServiceEndPoint"
          }
        ],
        "id": "thinCpeServiceEndpoint_g7ql71xjls99lw6b33wy4st06",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          }
        ],
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "none"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "relationships": [
          {
            "name": "node",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 0,
            "target_node_id": "thinCpe_w79nbcl3nvmka5dzc40qvwbe8"
          }
        ],
        "template_name": "thinCpeServiceEndpoint",
        "type_name": "sdno.node.ServiceEndPoint.ThinCpe"
      },
      {
        "artifacts": [
          {
            "name": "mapper",
            "source_path": "mapper/overlay.tsmap",
            "type_name": "sdno.artifacts.Implementation.ToscaSwaggerMapper"
          },
          {
            "name": "swagger",
            "source_path": "swagger/overlay.jaml",
            "type_name": "sdno.artifacts.Implementation.Swagger"
          }
        ],
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "realizes",
            "type_name": "sdno.capability.Realizes"
          }
        ],
        "id": "vpnConnection_y1swap0nuecyif8nwristmwk3",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          },
          {
            "name": "standard",
            "operations": [
              {
                "description": "Standard lifecycle undeploy operation.",
                "implementation": "POST /openoapi/sdnooverlay/v1/vpn-connections/action/undeploy",
                "name": "undeploy"
              },
              {
                "description": "Standard lifecycle get operation.",
                "implementation": "GET /openoapi/sdnooverlay/v1/vpn-connections",
                "name": "get"
              },
              {
                "description": "Standard lifecycle create operation.",
                "implementation": "POST /openoapi/sdnooverlay/v1/vpn-connections",
                "name": "create"
              },
              {
                "dependencies": [
                  "sdno.node.ConnectionEndPoint.SiteGateway/deploy",
                  "sdno.node.ConnectionEndPoint.VpcGateway/deploy",
                  "sdno.node.Connection.VpnConnection/deploy"
                ],
                "description": "Standard lifecycle deploy operation.",
                "implementation": "POST /openoapi/sdnooverlay/v1/vpn-connections/action/deploy",
                "name": "deploy"
              },
              {
                "description": "Standard lifecycle configure and update operation.",
                "implementation": "PUT /openoapi/sdnooverlay/v1/vpn-connections/{uuid}",
                "name": "update"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "implementation": "DELETE /openoapi/sdnooverlay/v1/vpn-connections/{uuid}",
                "name": "delete"
              }
            ],
            "type_name": "sdno.interfaces.lifecycle.Standard"
          }
        ],
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "vpn connection"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "vpnConnection_none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "relationships": [
          {
            "name": "endPoint",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 0,
            "target_node_id": "siteGateway_b6g5qq5lfzpqazim0ex9y3ypa"
          },
          {
            "name": "endPoint",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 1,
            "target_node_id": "vpcGateway_qyrwpfff0cjuott9ak30vv7bb"
          }
        ],
        "template_name": "vpnConnection",
        "type_name": "sdno.node.Connection.VpnConnection"
      },
      {
        "capabilities": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "endPoint",
            "type_name": "sdno.capability.ServiceEndPoint"
          }
        ],
        "id": "dcServiceEndpoint_qm7md5szwv8gg1uzy1e26elw4",
        "interfaces": [
          {
            "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
            "name": "Standard",
            "operations": [
              {
                "description": "Standard lifecycle create operation.",
                "name": "create"
              },
              {
                "description": "Standard lifecycle stop operation.",
                "name": "stop"
              },
              {
                "description": "Standard lifecycle start operation.",
                "name": "start"
              },
              {
                "description": "Standard lifecycle delete operation.",
                "name": "delete"
              },
              {
                "description": "Standard lifecycle configure operation.",
                "name": "configure"
              }
            ],
            "type_name": "tosca.interfaces.node.lifecycle.Standard"
          }
        ],
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "none"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "relationships": [
          {
            "name": "node",
            "source_interfaces": [
              {
                "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
                "name": "Configure",
                "operations": [
                  {
                    "description": "Operation to notify the target node of a source node which is now available via a relationship.",
                    "name": "add_source"
                  },
                  {
                    "description": "Operation to pre-configure the target endpoint.",
                    "name": "pre_configure_target"
                  },
                  {
                    "description": "Operation to post-configure the source endpoint.",
                    "name": "post_configure_source"
                  },
                  {
                    "description": "Operation to notify source some property or attribute of the target changed",
                    "name": "target_changed"
                  },
                  {
                    "description": "Operation to pre-configure the source endpoint.",
                    "name": "pre_configure_source"
                  },
                  {
                    "description": "Operation to post-configure the target endpoint.",
                    "name": "post_configure_target"
                  },
                  {
                    "description": "Operation to remove a target node.",
                    "name": "remove_target"
                  },
                  {
                    "description": "Operation to notify the source node of a target node being added via a relationship.",
                    "name": "add_target"
                  }
                ],
                "type_name": "tosca.interfaces.relationship.Configure"
              }
            ],
            "source_requirement_index": 0,
            "target_node_id": "dcGw_k49yv35nrkp9ql251ph6cqqc2"
          }
        ],
        "template_name": "dcServiceEndpoint",
        "type_name": "sdno.node.ServiceEndPoint.DcEndpoint"
      }
    ]
  },
  "model": {
    "description": "sdno basic types",
    "inputs": {
      "dcFwIp": {
        "description": "mgrIp of dc Firewall",
        "type_name": "string",
        "value": "none"
      },
      "dcGwIp": {
        "description": "mgrIp of dcGW",
        "type_name": "string",
        "value": "none"
      },
      "dcLbIp": {
        "description": "mgrIp of dc Load Balancer",
        "type_name": "string",
        "value": "none"
      },
      "siteCidr": {
        "description": "enterprise site cidr",
        "type_name": "string",
        "value": "none"
      },
      "siteName": {
        "description": "Name of Site",
        "type_name": "string",
        "value": "none"
      },
      "siteVni": {
        "description": "VxLAN ID connect site to vCPE",
        "type_name": "integer",
        "value": 0
      },
      "subnetVlan": {
        "description": "Vlan value of Subnet",
        "type_name": "integer",
        "value": 0
      },
      "vpcName": {
        "description": "in format of domain/project, should keep consistent with NFVO",
        "type_name": "string",
        "value": "none"
      },
      "vpcSubnetCidr": {
        "description": "vpc cidr",
        "type_name": "string",
        "value": "none"
      },
      "vpcSubnetName": {
        "description": "name of subnet in VPC, should keep consistent with NFVO",
        "type_name": "string",
        "value": "none"
      },
      "vpcVni": {
        "description": "vpc subnet vxlanID, should keep consistent with NFVO",
        "type_name": "integer",
        "value": 0
      },
      "vpnDescription": {
        "description": "description of Overlayvpn",
        "type_name": "string",
        "value": "none"
      },
      "vpnName": {
        "description": "Name of Overlayvpn",
        "type_name": "string",
        "value": "none"
      },
      "vpnType": {
        "description": "vpn connection type between vCPE and vpc.",
        "type_name": "string",
        "value": "IpSec"
      }
    },
    "metadata": {
      "id": "enterprise2Dc",
      "template_author": "Huawei",
      "template_name": "enterprise2DC",
      "vendor": "sdno",
      "version": 0.1
    },
    "node_templates": [
      {
        "artifact_templates": [
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x393e590>",
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x393e550>"
        ],
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "realizes",
            "type_name": "sdno.capability.Realizes"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x3962c50>",
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x3962f10>"
        ],
        "min_instances": 0,
        "name": "site",
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "deployCloudCpeByDeafult": {
            "description": null,
            "type_name": "string",
            "value": "true"
          },
          "description": {
            "type_name": "string",
            "value": "Site Service"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": {
              "get_input": "siteName"
            }
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "siteDescriptor": {
            "description": "site Descriptor",
            "type_name": "string",
            "value": {
              "get_input": "vpnType"
            }
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "requirement_templates": [
          {
            "name": "endPoint",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x393ed90>"
              ],
              "type_name": "sdno.relationship.ConnectionEndPoint"
            },
            "target_node_template_name": "vCpeConnectionEndPoint"
          },
          {
            "name": "endPoint",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x413b6d0>"
              ],
              "type_name": "sdno.relationship.ConnectionEndPoint"
            },
            "target_node_template_name": "thinCpeConnectionEndPoint"
          }
        ],
        "type_name": "sdno.node.Connection.Site"
      },
      {
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "host",
            "type_name": "sdno.capability.Host"
          },
          {
            "name": "binding",
            "type_name": "sdno.capability.Bindable"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x4158810>"
        ],
        "min_instances": 0,
        "name": "thinCpe",
        "properties": {
          "controllerID": {
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "none"
          },
          "id": {
            "type_name": "string",
            "value": "0"
          },
          "ipAddress": {
            "type_name": "string",
            "value": "0.0.0.0"
          },
          "logicID": {
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "nativeID": {
            "type_name": "string",
            "value": "none"
          },
          "phyNeID": {
            "type_name": "string",
            "value": "none"
          },
          "siteID": {
            "type_name": "string",
            "value": "none"
          },
          "siteName": {
            "type_name": "string",
            "value": {
              "get_input": "siteName"
            }
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "type_name": "sdno.node.Node"
      },
      {
        "artifact_templates": [
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x4143610>",
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x41435d0>"
        ],
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "realizes",
            "type_name": "sdno.capability.Realizes"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x4163d10>",
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x4163fd0>"
        ],
        "min_instances": 0,
        "name": "vlan",
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "Vlan Service"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": {
              "concat": [
                "vlan_",
                {
                  "get_input": "vpcName"
                }
              ]
            }
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          },
          "vlanId": {
            "description": "vlan id",
            "type_name": "integer",
            "value": {
              "get_input": "subnetVlan"
            }
          }
        },
        "requirement_templates": [
          {
            "name": "realizes",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x4143950>"
              ],
              "type_name": "sdno.relationship.RealizedBy"
            },
            "target_node_template_name": "site"
          }
        ],
        "type_name": "sdno.node.Connection.Vlan"
      },
      {
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "host",
            "type_name": "sdno.capability.Host"
          },
          {
            "name": "binding",
            "type_name": "sdno.capability.Bindable"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x4172c10>"
        ],
        "min_instances": 0,
        "name": "dcLb",
        "properties": {
          "controllerID": {
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "none"
          },
          "id": {
            "type_name": "string",
            "value": "0"
          },
          "ipAddress": {
            "type_name": "string",
            "value": {
              "get_input": "dcLbIp"
            }
          },
          "logicID": {
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "nativeID": {
            "type_name": "string",
            "value": "none"
          },
          "phyNeID": {
            "type_name": "string",
            "value": "none"
          },
          "siteID": {
            "type_name": "string",
            "value": "none"
          },
          "siteName": {
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "type_name": "sdno.node.Node"
      },
      {
        "artifact_templates": [
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x414d850>",
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x414d810>"
        ],
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "endPoint",
            "type_name": "sdno.capability.ConnectionEndPoint"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x414af50>",
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x414d250>"
        ],
        "min_instances": 0,
        "name": "siteGateway",
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "Vpn Gateway"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": {
              "concat": [
                "siteGateway_",
                {
                  "get_input": "vpcName"
                }
              ]
            }
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "type_name": "sdno.node.ConnectionEndPoint.SiteGateway"
      },
      {
        "artifact_templates": [
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x416f210>",
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x416f1d0>"
        ],
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "endPoint",
            "type_name": "sdno.capability.ConnectionEndPoint"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x4145910>",
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x4145bd0>"
        ],
        "min_instances": 0,
        "name": "vpcGateway",
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "Vpn Gateway"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": {
              "concat": [
                "vpcGateway_",
                {
                  "get_input": "vpcName"
                }
              ]
            }
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "type_name": "sdno.node.ConnectionEndPoint.VpcGateway"
      },
      {
        "artifact_templates": [
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x371ac90>",
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x371ac50>"
        ],
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "realizes",
            "type_name": "sdno.capability.Realizes"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x371a590>",
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x371a850>"
        ],
        "min_instances": 0,
        "name": "sfc",
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "Service Function Chain Service"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": {
              "concat": [
                "sfc_",
                {
                  "get_input": "vpcName"
                }
              ]
            }
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "scfNeId": {
            "description": "The id of scf NE",
            "type_name": "string",
            "value": {
              "get_attribute": [
                "dcGw",
                "id"
              ]
            }
          },
          "servicePathHops": {
            "description": "Hop Number of the SFC",
            "type_name": "list",
            "value": [
              {
                "hopNumber": 1,
                "name": "dcFw",
                "sfgId": "",
                "sfiId": {
                  "get_attribute": [
                    "dcFw",
                    "id"
                  ]
                }
              },
              {
                "hopNumber": 2,
                "name": "dcLb",
                "sfgId": "",
                "sfiId": {
                  "get_attribute": [
                    "dcLb",
                    "id"
                  ]
                }
              }
            ]
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "type_name": "sdno.node.Connection.Sfc"
      },
      {
        "artifact_templates": [
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x3717890>",
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x3717850>"
        ],
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "realizes",
            "type_name": "sdno.capability.Realizes"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x373cf90>",
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x3717290>"
        ],
        "min_instances": 0,
        "name": "vpcSubnet",
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "cidr": {
            "description": "VPC subnet IP network, should be in format CIDR format.",
            "type_name": "string",
            "value": {
              "get_input": "vpcSubnetCidr"
            }
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "VpcSubnet Service"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": {
              "get_input": "vpcSubnetName"
            }
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          },
          "vni": {
            "description": "The Vxlan id",
            "type_name": "integer",
            "value": {
              "get_input": "vpcVni"
            }
          }
        },
        "requirement_templates": [
          {
            "name": "realizes",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x3717e50>"
              ],
              "type_name": "sdno.relationship.RealizedBy"
            },
            "target_node_template_name": "vpc"
          }
        ],
        "type_name": "sdno.node.Connection.VpcSubnet"
      },
      {
        "artifact_templates": [
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x3735e10>",
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x3735dd0>"
        ],
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "realizes",
            "type_name": "sdno.capability.Realizes"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x3735550>",
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x3735810>"
        ],
        "min_instances": 0,
        "name": "siteSubnet",
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "cidrBlock": {
            "description": "cidr block",
            "type_name": "string",
            "value": {
              "get_input": "siteCidr"
            }
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "SiteSubnet Service"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": {
              "concat": [
                "siteSubnet_",
                {
                  "get_input": "vpcName"
                }
              ]
            }
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          },
          "vni": {
            "description": "vni",
            "type_name": "string",
            "value": {
              "get_input": "siteVni"
            }
          }
        },
        "requirement_templates": [
          {
            "name": "realizes",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x3711190>"
              ],
              "type_name": "sdno.relationship.RealizedBy"
            },
            "target_node_template_name": "vlan"
          }
        ],
        "type_name": "sdno.node.Connection.SiteSubnet"
      },
      {
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "host",
            "type_name": "sdno.capability.Host"
          },
          {
            "name": "binding",
            "type_name": "sdno.capability.Bindable"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x372f450>"
        ],
        "min_instances": 0,
        "name": "dcGw",
        "properties": {
          "controllerID": {
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "none"
          },
          "id": {
            "type_name": "string",
            "value": "0"
          },
          "ipAddress": {
            "type_name": "string",
            "value": {
              "get_input": "dcGwIp"
            }
          },
          "logicID": {
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "nativeID": {
            "type_name": "string",
            "value": "none"
          },
          "phyNeID": {
            "type_name": "string",
            "value": "none"
          },
          "siteID": {
            "type_name": "string",
            "value": "none"
          },
          "siteName": {
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "type_name": "sdno.node.Node"
      },
      {
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x3715090>",
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x3715350>"
        ],
        "min_instances": 0,
        "name": "enterprise2Dc",
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "none"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "lifecycleState": {
            "type_name": "LifecycleStateType",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "state_machine": {
            "type_name": "StateMachineType",
            "value": {
              "rows": [
                {
                  "apiOperation": "create",
                  "currentState": "none",
                  "newState": "created",
                  "transitionWorkflow": "create"
                },
                {
                  "apiOperation": "create",
                  "currentState": "created",
                  "newState": "created",
                  "transitionWorkflow": "error"
                },
                {
                  "apiOperation": "create",
                  "currentState": "deployed",
                  "newState": "deployed",
                  "transitionWorkflow": "error"
                },
                {
                  "apiOperation": "deploy",
                  "currentState": "none",
                  "newState": "deployed",
                  "transitionWorkflow": "deploy"
                },
                {
                  "apiOperation": "deploy",
                  "currentState": "created",
                  "newState": "deployed",
                  "transitionWorkflow": "deployCreated"
                },
                {
                  "apiOperation": "deploy",
                  "currentState": "deployed",
                  "newState": "deployed",
                  "transitionWorkflow": "ERR"
                },
                {
                  "apiOperation": "get",
                  "currentState": "none",
                  "newState": "none",
                  "transitionWorkflow": "ERR"
                },
                {
                  "apiOperation": "get",
                  "currentState": "created",
                  "newState": "created",
                  "transitionWorkflow": "get"
                },
                {
                  "apiOperation": "get",
                  "currentState": "deployed",
                  "newState": "deployed",
                  "transitionWorkflow": "get"
                },
                {
                  "apiOperation": "update",
                  "currentState": "none",
                  "newState": "none",
                  "transitionWorkflow": "ERR"
                },
                {
                  "apiOperation": "update",
                  "currentState": "created",
                  "newState": "created",
                  "transitionWorkflow": "updatecreated"
                },
                {
                  "apiOperation": "update",
                  "currentState": "deployed",
                  "newState": "deployed",
                  "transitionWorkflow": "updateDeployed"
                },
                {
                  "apiOperation": "undeploy",
                  "currentState": "none",
                  "newState": "none",
                  "transitionWorkflow": "ERR"
                },
                {
                  "apiOperation": "undeploy",
                  "currentState": "created",
                  "newState": "created",
                  "transitionWorkflow": "ERR"
                },
                {
                  "apiOperation": "undeploy",
                  "currentState": "deployed",
                  "newState": "created",
                  "transitionWorkflow": "undeploy"
                },
                {
                  "apiOperation": "delete",
                  "currentState": "none",
                  "newState": "none",
                  "transitionWorkflow": "ERR"
                },
                {
                  "apiOperation": "delete",
                  "currentState": "created",
                  "newState": "none",
                  "transitionWorkflow": "deleteCreated"
                },
                {
                  "apiOperation": "delete",
                  "currentState": "deployed",
                  "newState": "none",
                  "transitionWorkflow": "deleteDeployed"
                }
              ]
            }
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "templateId": {
            "type_name": "string",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "requirement_templates": [
          {
            "name": "endPoint",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x3715f90>"
              ],
              "type_name": "sdno.relationship.ServiceEndPoint"
            },
            "target_node_template_name": "thinCpeServiceEndpoint"
          },
          {
            "name": "endPoint",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x423c750>"
              ],
              "type_name": "sdno.relationship.ServiceEndPoint"
            },
            "target_node_template_name": "dcServiceEndpoint"
          },
          {
            "name": "realizes",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x423ce50>"
              ],
              "type_name": "sdno.relationship.RealizedBy"
            },
            "target_node_template_name": "siteSubnet"
          },
          {
            "name": "realizes",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x4238610>"
              ],
              "type_name": "sdno.relationship.RealizedBy"
            },
            "target_node_template_name": "vpn"
          },
          {
            "name": "realizes",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x4238d10>"
              ],
              "type_name": "sdno.relationship.RealizedBy"
            },
            "target_node_template_name": "vpcSubnet"
          },
          {
            "name": "realizes",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x4266450>"
              ],
              "type_name": "sdno.relationship.RealizedBy"
            },
            "target_node_template_name": "sfc"
          }
        ],
        "type_name": "sdno.node.ConnectivityService.Enterprise2Dc"
      },
      {
        "artifact_templates": [
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x4254f50>",
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x4254f10>"
        ],
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "endPoint",
            "type_name": "sdno.capability.ConnectionEndPoint"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x4254750>",
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x4254a10>"
        ],
        "min_instances": 0,
        "name": "vCpeConnectionEndPoint",
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "vCpe"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "requirement_templates": [
          {
            "name": "realizes",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x424c490>"
              ],
              "type_name": "sdno.relationship.RealizedBy"
            },
            "target_node_template_name": "site"
          },
          {
            "name": "node",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x424cf50>"
              ],
              "type_name": "sdno.relationship.HostedOn"
            },
            "target_node_template_name": "vCpe"
          }
        ],
        "type_name": "sdno.node.ConnectionEndPoint.VCpe"
      },
      {
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "host",
            "type_name": "sdno.capability.Host"
          },
          {
            "name": "binding",
            "type_name": "sdno.capability.Bindable"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x4244fd0>"
        ],
        "min_instances": 0,
        "name": "dcFw",
        "properties": {
          "controllerID": {
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "none"
          },
          "id": {
            "type_name": "string",
            "value": "0"
          },
          "ipAddress": {
            "type_name": "string",
            "value": {
              "get_input": "dcFwIp"
            }
          },
          "logicID": {
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "nativeID": {
            "type_name": "string",
            "value": "none"
          },
          "phyNeID": {
            "type_name": "string",
            "value": "none"
          },
          "siteID": {
            "type_name": "string",
            "value": "none"
          },
          "siteName": {
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "type_name": "sdno.node.Node"
      },
      {
        "artifact_templates": [
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x426bb50>",
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x426bb10>"
        ],
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "realizes",
            "type_name": "sdno.capability.Realizes"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x426b290>",
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x426b550>"
        ],
        "min_instances": 0,
        "name": "vpc",
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "Vpc Service"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": {
              "get_input": "vpcName"
            }
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "type_name": "sdno.node.Connection.Vpc"
      },
      {
        "artifact_templates": [
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x4235350>",
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x4235310>"
        ],
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "endPoint",
            "type_name": "sdno.capability.ConnectionEndPoint"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x4249a10>",
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x4249cd0>"
        ],
        "min_instances": 0,
        "name": "thinCpeConnectionEndPoint",
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "ThinCpe"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "requirement_templates": [
          {
            "name": "realizes",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x4235750>"
              ],
              "type_name": "sdno.relationship.RealizedBy"
            },
            "target_node_template_name": "site"
          },
          {
            "name": "node",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x4235f50>"
              ],
              "type_name": "sdno.relationship.HostedOn"
            },
            "target_node_template_name": "thinCpe"
          }
        ],
        "type_name": "sdno.node.ConnectionEndPoint.ThinCpe"
      },
      {
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "host",
            "type_name": "sdno.capability.Host"
          },
          {
            "name": "binding",
            "type_name": "sdno.capability.Bindable"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x7f161c0cc150>"
        ],
        "min_instances": 0,
        "name": "vCpe",
        "properties": {
          "controllerID": {
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "none"
          },
          "id": {
            "type_name": "string",
            "value": "0"
          },
          "ipAddress": {
            "type_name": "string",
            "value": "0.0.0.0"
          },
          "logicID": {
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "nativeID": {
            "type_name": "string",
            "value": "none"
          },
          "phyNeID": {
            "type_name": "string",
            "value": "none"
          },
          "siteID": {
            "type_name": "string",
            "value": "none"
          },
          "siteName": {
            "type_name": "string",
            "value": {
              "get_input": "siteName"
            }
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "type_name": "sdno.node.Node"
      },
      {
        "artifact_templates": [
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x7f161c0e4dd0>",
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x7f161c0e4d90>"
        ],
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "realizes",
            "type_name": "sdno.capability.Realizes"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x7f161c0e4450>",
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x7f161c0e4710>"
        ],
        "min_instances": 0,
        "name": "vpn",
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": {
              "get_input": "vpnDescription"
            }
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": {
              "get_input": "vpnName"
            }
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          },
          "vpnDescriptor": {
            "description": "vpn template name",
            "type_name": "string",
            "value": {
              "get_input": "vpnType"
            }
          }
        },
        "requirement_templates": [
          {
            "name": "realizes",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x7f161c0fe3d0>"
              ],
              "type_name": "sdno.relationship.RealizedBy"
            },
            "target_node_template_name": "vpnConnection"
          }
        ],
        "type_name": "sdno.node.Connection.Vpn"
      },
      {
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "endPoint",
            "type_name": "sdno.capability.ServiceEndPoint"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x7f161c0d34d0>"
        ],
        "min_instances": 0,
        "name": "thinCpeServiceEndpoint",
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "none"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "requirement_templates": [
          {
            "name": "node",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x7f161c0d3a10>"
              ],
              "type_name": "sdno.relationship.HostedOn"
            },
            "target_node_template_name": "thinCpe"
          }
        ],
        "type_name": "sdno.node.ServiceEndPoint.ThinCpe"
      },
      {
        "artifact_templates": [
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x7f161c0d6910>",
          "<aria.parser.modeling.model_elements.ArtifactTemplate object at 0x7f161c0d68d0>"
        ],
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "realizes",
            "type_name": "sdno.capability.Realizes"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x7f161c0f1f90>",
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x7f161c0d6290>"
        ],
        "min_instances": 0,
        "name": "vpnConnection",
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "vpn connection"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": {
              "concat": [
                "vpnConnection_",
                {
                  "get_input": "vpcName"
                }
              ]
            }
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "requirement_templates": [
          {
            "name": "endPoint",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x7f161c0d6e90>"
              ],
              "type_name": "sdno.relationship.ConnectionEndPoint"
            },
            "target_node_template_name": "siteGateway"
          },
          {
            "name": "endPoint",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x7f161c0f06d0>"
              ],
              "type_name": "sdno.relationship.ConnectionEndPoint"
            },
            "target_node_template_name": "vpcGateway"
          }
        ],
        "type_name": "sdno.node.Connection.VpnConnection"
      },
      {
        "capability_templates": [
          {
            "name": "feature",
            "type_name": "tosca.capabilities.Node"
          },
          {
            "name": "endPoint",
            "type_name": "sdno.capability.ServiceEndPoint"
          }
        ],
        "default_instances": 1,
        "interface_templates": [
          "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x7f161c0cb950>"
        ],
        "min_instances": 0,
        "name": "dcServiceEndpoint",
        "properties": {
          "actionState": {
            "description": "Stores the result of the last action on the service object.",
            "type_name": "ActionStateType",
            "value": "none"
          },
          "adminStatus": {
            "description": "Used to administratively activate or deactivate already deployed service object",
            "type_name": "AdministrationStateType",
            "value": "none"
          },
          "createTime": {
            "description": "create time",
            "type_name": "string",
            "value": "none"
          },
          "description": {
            "type_name": "string",
            "value": "none"
          },
          "id": {
            "type_name": "string",
            "value": "none"
          },
          "location": {
            "description": "Location if on single location",
            "type_name": "string",
            "value": "none"
          },
          "name": {
            "type_name": "string",
            "value": "none"
          },
          "operStatus": {
            "description": "Used to indicate if the service entity is operational.",
            "type_name": "OperationalStateType",
            "value": "none"
          },
          "ownerID": {
            "description": "ID of the owner of the object, can contain controllerID",
            "type_name": "string",
            "value": "sdno"
          },
          "statusReason": {
            "description": "In case of ERROR actionState, it will have the reason for the error. Otherwise its empty. It is required to make create process to be asynchronous.",
            "type_name": "string",
            "value": "none"
          },
          "syncStatus": {
            "description": "Used to indicate of the service entity is in sync or out of sync with the network",
            "type_name": "SyncStateType",
            "value": "none"
          },
          "tenantID": {
            "description": "ID of the tenant",
            "type_name": "string",
            "value": "none"
          },
          "updateTime": {
            "description": "update time",
            "type_name": "string",
            "value": "none"
          },
          "version": {
            "type_name": "string",
            "value": "1.0"
          }
        },
        "requirement_templates": [
          {
            "name": "node",
            "relationship_template": {
              "source_interface_templates": [
                "<aria.parser.modeling.model_elements.InterfaceTemplate object at 0x7f161c0cbe90>"
              ],
              "type_name": "sdno.relationship.HostedOn"
            },
            "target_node_template_name": "dcGw"
          }
        ],
        "type_name": "sdno.node.ServiceEndPoint.DcEndpoint"
      }
    ]
  },
  "types": {
    "artifact_types": [
      {
        "description": "This is the default (root) TOSCA Artifact Type definition that all other TOSCA base Artifact Types derive from.",
        "name": "tosca.artifacts.Root",
        "parent": null,
        "role": null
      },
      {
        "description": "This artifact type represents the parent type for all implementation artifacts in TOSCA. These artifacts are used to implement operations of TOSCA interfaces either directly (e.g., scripts) or indirectly (e.g., config. files).",
        "name": "tosca.artifacts.Implementation",
        "parent": "tosca.artifacts.Root",
        "role": null
      },
      {
        "description": "mapping between property of TOSCA node instance and data model used by swagger API",
        "name": "sdno.artifacts.Implementation.ToscaSwaggerMapper",
        "parent": "tosca.artifacts.Implementation",
        "role": null
      },
      {
        "description": "swagger API document",
        "name": "sdno.artifacts.Implementation.Swagger",
        "parent": "tosca.artifacts.Implementation",
        "role": null
      },
      {
        "description": "This artifact type represents a Bash script type that contains Bash commands that can be executed on the Unix Bash shell.",
        "name": "tosca.artifacts.Implementation.Bash",
        "parent": "tosca.artifacts.Implementation",
        "role": null
      },
      {
        "description": "This artifact type represents a Python file that contains Python language constructs that can be executed within a Python interpreter.",
        "name": "tosca.artifacts.Implementation.Python",
        "parent": "tosca.artifacts.Implementation",
        "role": null
      },
      {
        "description": "This artifact type represents the parent type for all deployment artifacts in TOSCA. This class of artifacts typically represents a binary packaging of an application or service that is used to install/create or deploy it as part of a node's lifecycle.",
        "name": "tosca.artifacts.Deployment",
        "parent": "tosca.artifacts.Root",
        "role": null
      },
      {
        "description": "This artifact represents the parent type for all Virtual Machine (VM) image and container formatted deployment artifacts. These images contain a stateful capture of a machine (e.g., server) including operating system and installed software along with any configurations and can be run on another machine using a hypervisor which virtualizes typical server (i.e., hardware) resources.",
        "name": "tosca.artifacts.Deployment.Image.VM",
        "parent": "tosca.artifacts.Deployment",
        "role": null
      },
      {
        "description": "This artifact type represents a parent type for any \"image\" which is an opaque packaging of a TOSCA Node's deployment (whether real or virtual) whose contents are typically already installed and pre-configured (i.e., \"stateful\") and prepared to be run on a known target container.",
        "name": "tosca.artifacts.Deployment.Image",
        "parent": "tosca.artifacts.Deployment",
        "role": null
      },
      {
        "description": "This artifact type is used when an artifact definition needs to have its associated file simply treated as a file and no special handling/handlers are invoked (i.e., it is not treated as either an implementation or deployment artifact type).",
        "name": "tosca.artifacts.File",
        "parent": "tosca.artifacts.Root",
        "role": null
      }
    ],
    "capability_types": [
      {
        "description": "This is the default (root) TOSCA Capability Type definition that all other TOSCA Capability Types derive from.",
        "name": "tosca.capabilities.Root",
        "parent": null,
        "role": null
      },
      {
        "description": null,
        "name": "sdno.capability.ServiceEndPoint",
        "parent": "tosca.capabilities.Root",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.capability.Realizes",
        "parent": "tosca.capabilities.Root",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.capability.ConnectionEndPoint",
        "parent": "tosca.capabilities.Root",
        "role": null
      },
      {
        "description": "The Container capability, when included on a Node Type or Template definition, indicates that the node can act as a container for (or a host for) one or more other declared Node Types.",
        "name": "tosca.capabilities.Container",
        "parent": "tosca.capabilities.Root",
        "role": null
      },
      {
        "description": "This is the default TOSCA type that should be used or extended to define an attachment capability of a (logical) infrastructure device node (e.g., BlockStorage node).",
        "name": "tosca.capabilities.Attachment",
        "parent": "tosca.capabilities.Root",
        "role": null
      },
      {
        "description": "This is the default TOSCA type that should be used or extended to define a network endpoint capability. This includes the information to express a basic endpoint with a single port or a complex endpoint with multiple ports. By default the Endpoint is assumed to represent an address on a private network unless otherwise specified.",
        "name": "tosca.capabilities.Endpoint",
        "parent": "tosca.capabilities.Root",
        "role": null
      },
      {
        "description": "This is the default TOSCA type that should be used or extended to define a specialized database endpoint capability.",
        "name": "tosca.capabilities.Endpoint.Database",
        "parent": "tosca.capabilities.Endpoint",
        "role": null
      },
      {
        "description": "This is the default TOSCA type that should be used or extended to define a specialized administrator endpoint capability.",
        "name": "tosca.capabilities.Endpoint.Admin",
        "parent": "tosca.capabilities.Endpoint",
        "role": null
      },
      {
        "description": "This capability represents a public endpoint which is accessible to the general internet (and its public IP address ranges).\nThis public endpoint capability also can be used to create a floating (IP) address that the underlying network assigns from a pool allocated from the application's underlying public network. This floating address is managed by the underlying network such that can be routed an application's private address and remains reliable to internet clients.",
        "name": "tosca.capabilities.Endpoint.Public",
        "parent": "tosca.capabilities.Endpoint",
        "role": null
      },
      {
        "description": "This is the default TOSCA type that should be used to express a scalability capability for a node.",
        "name": "tosca.capabilities.Scalable",
        "parent": "tosca.capabilities.Root",
        "role": null
      },
      {
        "description": "This is the default TOSCA type that should be used to express an Operating System capability for a node.",
        "name": "tosca.capabilities.OperatingSystem",
        "parent": "tosca.capabilities.Root",
        "role": null
      },
      {
        "description": "The Node capability indicates the base capabilities of a TOSCA Node Type.",
        "name": "tosca.capabilities.Node",
        "parent": "tosca.capabilities.Root",
        "role": null
      },
      {
        "description": "A node type that includes the Bindable capability indicates that it can be bound to a logical network association via a network port.",
        "name": "tosca.capabilities.network.Bindable",
        "parent": "tosca.capabilities.Node",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.capability.Bindable",
        "parent": "tosca.capabilities.Node",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.capability.Host",
        "parent": "tosca.capabilities.Node",
        "role": null
      },
      {
        "description": "A node type that includes the Linkable capability indicates that it can be pointed by tosca.relationships.network.LinksTo relationship type.",
        "name": "tosca.capabilities.network.Linkable",
        "parent": "tosca.capabilities.Node",
        "role": null
      }
    ],
    "group_types": [
      {
        "description": "This is the default (root) TOSCA Group Type definition that all other TOSCA base Group Types derive from.",
        "name": "tosca.groups.Root",
        "parent": null,
        "role": null
      }
    ],
    "interface_types": [
      {
        "description": "This is the default (root) TOSCA Interface Type definition that all other TOSCA Interface Types derive from.",
        "name": "tosca.interfaces.Root",
        "parent": null,
        "role": null
      },
      {
        "description": "The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.",
        "name": "tosca.interfaces.relationship.Configure",
        "parent": "tosca.interfaces.Root",
        "role": null
      },
      {
        "description": "This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.",
        "name": "tosca.interfaces.node.lifecycle.Standard",
        "parent": "tosca.interfaces.Root",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.interfaces.lifecycle.Standard",
        "parent": null,
        "role": null
      }
    ],
    "node_types": [
      {
        "description": "The TOSCA Root Node Type is the default type that all other TOSCA base Node Types derive from. This allows for all TOSCA nodes to have a consistent set of features for modeling and management (e.g., consistent definitions for requirements, capabilities and lifecycle interfaces).",
        "name": "tosca.nodes.Root",
        "parent": null,
        "role": null
      },
      {
        "description": "The TOSCA Port node represents a logical entity that associates between Compute and Network normative types.\nThe Port node type effectively represents a single virtual NIC on the Compute node instance.",
        "name": "tosca.nodes.network.Port",
        "parent": "tosca.nodes.Root",
        "role": null
      },
      {
        "description": "The TOSCA ObjectStorage node represents storage that provides the ability to store data as objects (or BLOBs of data) without consideration for the underlying filesystem or devices.",
        "name": "tosca.nodes.ObjectStorage",
        "parent": "tosca.nodes.Root",
        "role": null
      },
      {
        "description": "The TOSCA Network node represents a simple, logical network service.",
        "name": "tosca.nodes.network.Network",
        "parent": "tosca.nodes.Root",
        "role": null
      },
      {
        "description": "The TOSCA Load Balancer node represents logical function that be used in conjunction with a Floating Address to distribute an application's traffic (load) across a number of instances of the application (e.g., for a clustered or scaled application).",
        "name": "tosca.nodes.LoadBalancer",
        "parent": "tosca.nodes.Root",
        "role": null
      },
      {
        "description": "The TOSCA SoftwareComponent node represents a generic software component that can be managed and run by a TOSCA Compute Node Type.",
        "name": "tosca.nodes.SoftwareComponent",
        "parent": "tosca.nodes.Root",
        "role": null
      },
      {
        "description": "The TOSCA WebApplication node represents a software application that can be managed and run by a TOSCA WebServer node. Specific types of web applications such as Java, etc. could be derived from this type.",
        "name": "tosca.nodes.WebApplication",
        "parent": "tosca.nodes.SoftwareComponent",
        "role": null
      },
      {
        "description": "The TOSCA DBMS node represents a typical relational, SQL Database Management System software component or service.",
        "name": "tosca.nodes.DBMS",
        "parent": "tosca.nodes.SoftwareComponent",
        "role": null
      },
      {
        "description": "The TOSCA Container Runtime node represents operating system-level virtualization technology used to run multiple application services on a single Compute host.",
        "name": "tosca.nodes.Container.Runtime",
        "parent": "tosca.nodes.SoftwareComponent",
        "role": null
      },
      {
        "description": "This TOSCA WebServer Node Type represents an abstract software component or service that is capable of hosting and providing management operations for one or more WebApplication nodes.",
        "name": "tosca.nodes.WebServer",
        "parent": "tosca.nodes.SoftwareComponent",
        "role": null
      },
      {
        "description": "The TOSCA Database node represents a logical database that can be managed and hosted by a TOSCA DBMS node.",
        "name": "tosca.nodes.Database",
        "parent": "tosca.nodes.Root",
        "role": null
      },
      {
        "description": "The TOSCA Compute node represents one or more real or virtual processors of software applications or services along with other essential local resources. Collectively, the resources the compute node represents can logically be viewed as a (real or virtual) \"server\".",
        "name": "tosca.nodes.Compute",
        "parent": "tosca.nodes.Root",
        "role": null
      },
      {
        "description": "The SDNO Node Type all other SDNO base Node Types derive from",
        "name": "sdno.node.Root",
        "parent": "tosca.nodes.Root",
        "role": null
      },
      {
        "description": "It represents the outward customer-facing aspects of the edge-port functions that access the forwarding capabilities provided by the Node. Hence it provides a limited, simplified view of interest to external clients,  that enable the clients to request connectivity without the need to understand the provider network internals.",
        "name": "sdno.node.ServiceEndPoint",
        "parent": "sdno.node.Root",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.node.ServiceEndPoint.ThinCpe",
        "parent": "sdno.node.ServiceEndPoint",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.node.ServiceEndPoint.DcEndpoint",
        "parent": "sdno.node.ServiceEndPoint",
        "role": null
      },
      {
        "description": "It represents the ingress/egress port aspects that access the forwarding function provided  by the Connection.",
        "name": "sdno.node.ConnectionEndPoint",
        "parent": "sdno.node.Root",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.node.ConnectionEndPoint.ThinCpe",
        "parent": "sdno.node.ConnectionEndPoint",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.node.ConnectionEndPoint.VpcGateway",
        "parent": "sdno.node.ConnectionEndPoint",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.node.ConnectionEndPoint.VCpe",
        "parent": "sdno.node.ConnectionEndPoint",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.node.ConnectionEndPoint.SiteGateway",
        "parent": "sdno.node.ConnectionEndPoint",
        "role": null
      },
      {
        "description": "It represents the inward network-facing aspects of the edge-port functions that access the forwarding capabilities provided by the Node.",
        "name": "sdno.node.NodeEdgePoint",
        "parent": "sdno.node.Root",
        "role": null
      },
      {
        "description": "It represents a network element which can be managed remotely (through controller or not). Sometimes called managed element.",
        "name": "sdno.node.Node",
        "parent": "sdno.node.Root",
        "role": null
      },
      {
        "description": "It represents an “intent-like” request for connectivity between two or more ServiceEndPoints. As such, ConnectivityService is a container for connectivity request details and is distinct  from the Connection that realizes the request",
        "name": "sdno.node.ConnectivityService",
        "parent": "sdno.node.Root",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.node.ConnectivityService.Enterprise2Dc",
        "parent": "sdno.node.ConnectivityService",
        "role": null
      },
      {
        "description": "The Connection represents an enabled potential for forwarding between two or more connectionEndPoints",
        "name": "sdno.node.Connection",
        "parent": "sdno.node.Root",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.node.Connection.VpnConnection",
        "parent": "sdno.node.Connection",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.node.Connection.SiteSubnet",
        "parent": "sdno.node.Connection",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.node.Connection.Vlan",
        "parent": "sdno.node.Connection",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.node.Connection.VpcSubnet",
        "parent": "sdno.node.Connection",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.node.Connection.Vpc",
        "parent": "sdno.node.Connection",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.node.Connection.Site",
        "parent": "sdno.node.Connection",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.node.Connection.Sfc",
        "parent": "sdno.node.Connection",
        "role": null
      },
      {
        "description": null,
        "name": "sdno.node.Connection.Vpn",
        "parent": "sdno.node.Connection",
        "role": null
      },
      {
        "description": "The TOSCA Container Application node represents an application that requires Container-level virtualization technology.",
        "name": "tosca.nodes.Container.Application",
        "parent": "tosca.nodes.Root",
        "role": null
      },
      {
        "description": "",
        "name": "tosca.nodes.BlockStorage",
        "parent": "tosca.nodes.Root",
        "role": null
      }
    ],
    "policy_trigger_types": [],
    "policy_types": [
      {
        "description": "This is the default (root) TOSCA Policy Type definition that all other TOSCA base Policy Types derive from.",
        "name": "tosca.policies.Root",
        "parent": null,
        "role": null
      },
      {
        "description": "This is the default (root) TOSCA Policy Type definition that is used to govern placement of TOSCA nodes or groups of nodes.",
        "name": "tosca.policies.Placement",
        "parent": "tosca.policies.Root",
        "role": null
      },
      {
        "description": "This is the default (root) TOSCA Policy Type definition that is used to govern update of TOSCA nodes or groups of nodes.",
        "name": "tosca.policies.Update",
        "parent": "tosca.policies.Root",
        "role": null
      },
      {
        "description": "This is the default (root) TOSCA Policy Type definition that is used to declare performance requirements for TOSCA nodes or groups of nodes.",
        "name": "tosca.policies.Performance",
        "parent": "tosca.policies.Root",
        "role": null
      },
      {
        "description": "This is the default (root) TOSCA Policy Type definition that is used to govern scaling of TOSCA nodes or groups of nodes.",
        "name": "tosca.policies.Scaling",
        "parent": "tosca.policies.Root",
        "role": null
      }
    ],
    "relationship_types": [
      {
        "description": "This is the default (root) TOSCA Relationship Type definition that all other TOSCA Relationship Types derive from.",
        "name": "tosca.relationships.Root",
        "parent": null,
        "role": null
      },
      {
        "description": "This type represents an attachment relationship between two nodes. For example, an AttachesTo relationship type would be used for attaching a storage node to a Compute node.",
        "name": "tosca.relationships.AttachesTo",
        "parent": "tosca.relationships.Root",
        "role": null
      },
      {
        "description": "This type represents a network connection relationship between two nodes.",
        "name": "tosca.relationships.ConnectsTo",
        "parent": "tosca.relationships.Root",
        "role": null
      },
      {
        "description": "This type represents an intentional network routing between two Endpoints in different networks.",
        "name": "tosca.relationships.RoutesTo",
        "parent": "tosca.relationships.ConnectsTo",
        "role": null
      },
      {
        "description": "This type represents a hosting relationship between two nodes.",
        "name": "tosca.relationships.HostedOn",
        "parent": "tosca.relationships.Root",
        "role": null
      },
      {
        "description": "The relationship specifies which ConnectionEndPonts are terminating the Connection. The association of the Connection to ConnectionEndPoints is made via the Ports of the Connection, where each Port of the Connection has a role and directionality in the context of the Connection. ",
        "name": "sdno.relationship.ConnectionEndPoint",
        "parent": "tosca.relationships.Root",
        "role": null
      },
      {
        "description": "The relationship specifies which ServiceEndPoints are terminating the ConnectivityService. The association of the ConnectivityService to ServiceEndPoints is made via the Ports of the ConnectivityService, where each Port of the ConnectivityService has a role and directionality in the context of the ConnectivityService.",
        "name": "sdno.relationship.ServiceEndPoint",
        "parent": "tosca.relationships.Root",
        "role": null
      },
      {
        "description": "The relationship specifies what Node the Endpoint is hosted on. ",
        "name": "sdno.relationship.HostedOn",
        "parent": "tosca.relationships.Root",
        "role": null
      },
      {
        "description": "The relationship specifies what Connenctions are Connectivity Services or Connections realized from. ",
        "name": "sdno.relationship.RealizedBy",
        "parent": "tosca.relationships.Root",
        "role": null
      },
      {
        "description": "This type represents a general dependency relationship between two nodes.",
        "name": "tosca.relationships.DependsOn",
        "parent": "tosca.relationships.Root",
        "role": null
      },
      {
        "description": "This relationship type represents an association relationship between Port and Network node types.",
        "name": "tosca.relationships.network.LinksTo",
        "parent": "tosca.relationships.DependsOn",
        "role": null
      },
      {
        "description": "This type represents a network association relationship between Port and Compute node types.",
        "name": "tosca.relationships.network.BindsTo",
        "parent": "tosca.relationships.DependsOn",
        "role": null
      },
      {
        "description": "The relationship  represents a network association relationship between NodeEdgePoint and Network Node types",
        "name": "sdno.relationship.BindsTo",
        "parent": "tosca.relationships.DependsOn",
        "role": null
      }
    ]
  }
}
